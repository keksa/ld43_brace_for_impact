<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_torpedo</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.33;

// explosion
partExplosion = part_type_create();
part_type_shape(partExplosion, pt_shape_explosion);
part_type_direction(partExplosion, 0, 359, 0, 0);
part_type_colour3(partExplosion, c_red, c_orange, c_yellow);
part_type_blend(partExplosion, true);
part_type_size(partExplosion, 0.25, 1, -0.25, 0.25);
part_type_speed(partExplosion, 1, 2, 0, 0);
part_type_life(partExplosion, 8, 10);

explosion_emitter = part_emitter_create(global.torpedoParticles);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_emitter_burst(
    global.torpedoParticles,
    explosion_emitter,
    partExplosion,
    30
);
part_emitter_destroy(global.torpedoParticles, explosion_emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (y &lt; -100) {
    instance_destroy();
}

if (global.gameOver) {
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_engine_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other) {
    var minAngleChange = 10;
    var maxAngleChange = 30;
    var diff = 0;
    
    // to make tossing controls better, make engines on left side prevent left movement and vice versa
    // that way if I'm trying to go left and the left engine is preventing me I can just double tap space
    if (engine_key == "b_l" || engine_key == "t_l") {
        diff = random_range(-minAngleChange, -maxAngleChange);
    } else if (engine_key == "b_r" || engine_key == "t_r") {
        diff = random_range(minAngleChange, maxAngleChange);
    } else {
        diff = random_range(minAngleChange, maxAngleChange) * choose(-1, 1);
    }
    
    // once angled one way, only make it worse in that way
    if (
        (engine_angle &gt; 0 and diff &lt; 0)
        || (engine_angle &lt; 0 and diff &gt; 0)
    ) {
        diff *= -1;
    }

    engine_angle += diff;
    hp--;
}

audio_play_sound(snd_hit, 10, false);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

part_emitter_region(
    global.torpedoParticles,
    explosion_emitter,
    x + lengthdir_x(-22, image_angle),
    x + lengthdir_x(2, image_angle),
    y + lengthdir_y(2, image_angle),
    y + lengthdir_y(-2, image_angle),
    ps_shape_ellipse,
    ps_distr_gaussian
);

var inSensorRange = y - room_height &lt; global.player.sensor_range;
if (y &gt; room_height and inSensorRange) {
    var toPlayer = round(distance_to_object(global.player));

    draw_set_alpha(1);
    draw_triangle_colour(
        x,
        room_height - 8,
        x - 16,
        room_height - 40,
        x + 16,
        room_height - 40,
        c_red,
        c_orange,
        c_red,
        false
    );
    draw_set_font(f_mono_bold_12);
    draw_set_colour(c_red);
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text(x, room_height - 40, toPlayer);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
