<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>engine_angle = 0;
is_glued = true;
is_tossed = false;
is_selected_for_tossing = false;
hp = 3;
image_speed = 0;
image_index = 0;

toss_rotate = 0;
toss_speed = 6;
toss_direction = 0;

tossing_alpha = 1;
tossing_alpha_way = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (part_emitter_exists(global.engineParticles, fire_emitter)) {
    part_emitter_destroy(global.engineParticles, fire_emitter);
}

if (part_emitter_exists(global.torpedoParticles, explosion_emitter)) {
    part_emitter_destroy(global.torpedoParticles, explosion_emitter);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if shot to oblivion instead of tossed, damage nearest engine
if (is_glued and hp &lt;= 0) {
    scr_do_really_toss_engine(id);

    audio_play_sound(snd_explode, 20, false);
    part_emitter_burst(
        global.torpedoParticles,
        explosion_emitter,
        partExplosion,
        60
    );

    var nearestEngine = scr_find_nearest_engine(x, y, id);
    if (nearestEngine != noone) {
        nearestEngine.hp--;
    }
}

if (! is_glued and ! is_tossed) {
    motion_add(toss_direction, toss_speed);
    motion_add(hull.ship.direction - 180, hull.ship.speed);
    part_emitter_destroy(global.engineParticles, fire_emitter);
    is_tossed = true;
    ds_map_delete(hull.ship.engines, engine_key);
    is_selected_for_tossing = false;
}

if (
    is_tossed
    &amp;&amp; ! rectangle_in_rectangle(
        bbox_left,bbox_top,bbox_right,bbox_bottom,
        0, 0, room_width, room_height
    )
) {
    hull.ship.engine_count--;
    instance_destroy();
}

if (global.gameOver &amp;&amp; part_emitter_exists(global.engineParticles, fire_emitter)) {
    part_emitter_destroy(global.engineParticles, fire_emitter);
}
if (is_glued &amp;&amp; ! global.gameOver &amp;&amp; ! part_emitter_exists(global.engineParticles, fire_emitter)) {
    fire_emitter = part_emitter_create(global.engineParticles);
    part_emitter_stream(
        global.engineParticles,
        fire_emitter,
        partEngineFire,
        120
    );
}

visible = hull.visible;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// handle "selected for tossing" draw

draw_set_font(f_mono_bold_12);
draw_set_alpha(1);
draw_set_colour(c_white);
draw_set_valign(fa_middle);
var keyText = "space";
var keyWidth = string_width(keyText);
var keyHeight = string_height(keyText);
var spX = 0;
var spY = 0;

var rX1 = 0;
var rY1 = 0;
var rX2 = 0;
var rY2 = 0;
var hPadding = 4;
var vPadding = 3;

if (engine_key == "b_l" || engine_key == "t_l") {
    draw_set_halign(fa_right);
    spX = - sprite_height - 8;
    
    rX1 = x + spX - keyWidth - hPadding;
    rY1 = y - keyHeight / 2 - vPadding;
    rX2 = x + spX + hPadding;
    rY2 = y + keyHeight / 2 + vPadding;
} else if (engine_key == "b_r" || engine_key == "t_r") {
    draw_set_halign(fa_left);
    spX = sprite_height + 8;
    
    rX1 = x + spX - hPadding;
    rY1 = y - keyHeight / 2 - vPadding;
    rX2 = x + spX + keyWidth + hPadding;
    rY2 = y + keyHeight / 2 + vPadding;
} else {
    draw_set_halign(fa_center);
    spY = sprite_width + 8;
    
    rX1 = x - (keyWidth / 2) - hPadding;
    rY1 = y + spY - keyHeight / 2 - vPadding;
    rX2 = x + (keyWidth / 2) + hPadding;
    rY2 = y + spY + keyHeight / 2 + vPadding;
}

tossing_alpha += (0.05 * tossing_alpha_way);
if (tossing_alpha &gt; 1) {
    tossing_alpha = 1;
    tossing_alpha_way *= -1;
} else if (tossing_alpha &lt; 0) {
    tossing_alpha = 0;
    tossing_alpha_way *= -1;
}

draw_text(x + spX, y + spY, keyText);
draw_set_alpha(tossing_alpha);
draw_roundrect_ext(rX1, rY1, rX2, rY2, 4, 4, true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (is_glued) {
    x = hull.x + lengthdir_x(distance_vs_hull, angle_vs_hull + hull.image_angle);
    y = hull.y + lengthdir_y(distance_vs_hull, angle_vs_hull + hull.image_angle);
    image_angle = hull.image_angle + engine_angle;
} else {
    image_angle += toss_rotate;
}

if (is_selected_for_tossing) {
    event_user(0);
}

// engine fire
part_type_direction(partEngineFire, image_angle + 180, image_angle + 180, 0, 0);
var angle_vs_engine = point_direction(0, 0, fire_particle_region_offset_x, fire_particle_region_offset_y);
var distance_vs_engine = point_distance(0, 0, fire_particle_region_offset_x, fire_particle_region_offset_y);
part_emitter_region(
    global.engineParticles,
    fire_emitter,
    x + lengthdir_x(distance_vs_engine, angle_vs_engine + image_angle) + engine_power * 3,
    x + lengthdir_x(distance_vs_engine, angle_vs_engine + image_angle) - engine_power * 3,
    y + lengthdir_y(distance_vs_engine, angle_vs_engine + image_angle) + engine_power * 3,
    y + lengthdir_y(distance_vs_engine, angle_vs_engine + image_angle) - engine_power * 3,
    ps_shape_ellipse,
    ps_distr_gaussian
);

part_emitter_region(
    global.torpedoParticles,
    explosion_emitter,
    x + lengthdir_x(-33, image_angle),
    x + lengthdir_x(27, image_angle),
    y + lengthdir_y(-12, image_angle),
    y + lengthdir_y(12, image_angle),
    ps_shape_ellipse,
    ps_distr_linear
);

// HP
switch (hp) {
    case 3: image_index = 0; break;
    case 2: image_index = 1; break;
    default: image_index = 2; break;
}

draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
